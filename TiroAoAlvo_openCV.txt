#include "opencv2/objdetect.hpp"
#include "opencv2/highgui.hpp"
#include "opencv2/imgproc.hpp"
#include <iostream>
#include <exception>
#include <stdio.h>
#include <string>
#include <fstream>
#include <Windows.h>
#include <tchar.h>
#include "SerialClass.h"

using namespace std;
using namespace cv;

void detectAndDraw(Mat& img, CascadeClassifier& cascade, double scale);

string cascadeName;
const char* title = "Tiro ao alvo";

int main(int argc, const char** argv){
	VideoCapture capture(0);
	Mat frame;
	CascadeClassifier cascade;
	double scale;

	Serial* SP = new Serial("\\\\.\\COM3");    // adjust as needed
	char incomingData[256] = "";
	int dataLength = 255;
	int readResult = 0;

	cascadeName = "C:/Users/gabri/vcpkg/buildtrees/opencv4/src/4.1.1-d4651a36c2/data/haarcascades/haarcascade_frontalface_alt.xml";
	scale = 3;

	if (!cascade.load(cascadeName))
	{
		cerr << "ERROR: Could not load classifier cascade:\n " << cascadeName << endl;
		return -1;
	}

	try {

		if (!capture.isOpened())
			cout << "Capture from camera #0 didn't work" << endl;
	}
	catch (std::exception& e)
	{
		std::cout << " Excecao capturada open: " << e.what() << std::endl;
	}

	if (capture.isOpened()){
		cout << "Video capturing has been started ..." << endl;
		namedWindow(title, cv::WINDOW_NORMAL);
		for (;;){
			try {
				capture >> frame;
			}
			catch (cv::Exception& e){
				std::cout << " Excecao2 capturada frame: " << e.what() << std::endl;
				Sleep(1000000);
				continue;
			}
			catch (std::exception& e){
				std::cout << " Excecao3 capturada frame: " << e.what() << std::endl;
				Sleep(1000000);
				continue;
			}

			if (frame.empty())
				break;

			detectAndDraw(frame, cascade, scale);

			char c = (char)waitKey(10);
			if (c == 27 || c == 'q' || c == 'Q')
				break;
		}
	}else{                                    //QUANDO O OPENCV NÃƒO ESTIVER RODANDO

		int pontos, placar, valorInt = 0;
		char valorStr[10];

		while (SP->IsConnected())
		{
			ifstream
				input("placar.txt", ios::in);
			ofstream
				output("placar.txt", ios::out | ios::trunc);


			if (!input.is_open()) {
				return 1;
			}
			if (!output.is_open()) {
				return 1;
			}

			readResult = SP->ReadData(incomingData, dataLength);
			// printf("Bytes read: (0 means no data available) %i\n",readResult);
			incomingData[readResult] = 0;
			valorInt = atoi(incomingData);

			Sleep(500);


			while (!input.eof()) {

				// getline(input, pontos);
				input >> pontos;

				if (valorInt > pontos) {
					output << valorInt << endl;
					placar = valorInt;
				}
				else {
					placar = pontos;
					output << placar << endl;
				}
			}

			itoa(placar, valorStr, 10);

			output.close();
			input.close();

			SP->WriteData(valorStr, 11);
		}
	}


	return 0;
}

/**
 * @brief Draws a transparent image over a frame Mat.
 *
 * @param frame the frame where the transparent image will be drawn
 * @param transp the Mat image with transparency, read from a PNG image, with the IMREAD_UNCHANGED flag
 * @param xPos x position of the frame image where the image will start.
 * @param yPos y position of the frame image where the image will start.
 */
void drawTransparency(Mat frame, Mat transp, int xPos, int yPos) {
	Mat mask;
	vector<Mat> layers;

	split(transp, layers); // seperate channels
	Mat rgb[3] = { layers[0],layers[1],layers[2] };
	mask = layers[3]; // png's alpha channel used as mask
	merge(rgb, 3, transp);  // put together the RGB channels, now transp insn't transparent 
	transp.copyTo(frame.rowRange(yPos, yPos + transp.rows).colRange(xPos, xPos + transp.cols), mask);
}

void detectAndDraw(Mat& img, CascadeClassifier& cascade, double scale)
{
	vector<Rect> faces;
	Scalar color = Scalar(255, 0, 0);
	Mat gray, smallImg;

	int x1 = 0;
	int y1 = 60;
	int width1 = 211;
	int height1 = 175;
	Point pt1a(x1, y1);
	Point pt1b(x1 + width1, y1 + height1);

	int x2 = width1 + 1;
	int y2 = y1;
	int width2 = width1;
	int height2 = height1;
	Point pt2a(x2, y2);
	Point pt2b(x2 + width2, y2 + height2);

	int x3 = (width1 + 1) * 2;
	int y3 = y1;
	int width3 = width1;
	int height3 = height1;
	Point pt3a(x3, y3);
	Point pt3b(x3 + width3, y3 + height3);

	int x4 = 0;
	int y4 = 236;
	int width4 = ((width1 + 1) * 2) + width1;
	int height4 = 182;
	Point pt4a(x4, y4);
	Point pt4b(x4 + width4, y4 + height4);

	cvtColor(img, gray, COLOR_BGR2GRAY);
	double fx = 1 / scale;
	resize(gray, smallImg, Size(), fx, fx, INTER_LINEAR);
	equalizeHist(smallImg, smallImg);

	cascade.detectMultiScale(smallImg, faces,
		1.3, 2, 0
		//|CASCADE_FIND_BIGGEST_OBJECT
		//|CASCADE_DO_ROUGH_SEARCH
		| CASCADE_SCALE_IMAGE,
		Size(40, 40));

	for (size_t i = 0; i < faces.size(); i++)
	{
		Rect r = faces[i];
		Point center;
		char quad;

		//cout << "xy face = " << r.x << "x" << r.y << endl;

		if (r.x >= 1 && r.x <= 22 && r.y >= 20 && r.y <= 35) {
			quad = 'a';
			cout << "Sinal de saida: " << quad << endl;
			//SP->WriteData(quad, 10);
		}
		if (r.x >= 70 && r.x <= 92 && r.y >= 20 && r.y <= 35) {
			quad = 'b';
			cout << "Sinal de saida: " << quad << endl;
			//SP->WriteData(quad, 10);
		}
		if (r.x >= 140 && r.x <= 168 && r.y >= 20 && r.y <= 35) {
			quad = 'c';
			cout << "Sinal de saida: " << quad << endl;
			//SP->WriteData(quad, 10);
		}
		if (r.x >= 1 && r.x <= 168 && r.y >= 80 && r.y <= 95) {
			quad = 'd';
			cout <<"Sinal de saida: "<< quad << endl;
			//SP->WriteData(quad, 10);
		}

		rectangle(img, Point(cvRound(r.x * scale), cvRound(r.y * scale)),
			Point(cvRound((r.x + r.width - 1) * scale), cvRound((r.y + r.height - 1) * scale)),
			color, 3, 8, 0);

	}

	rectangle(img, pt1a, pt1b, Scalar(0, 255, 0));//verde
	rectangle(img, pt2a, pt2b, Scalar(0, 255, 0));//verde
	rectangle(img, pt3a, pt3b, Scalar(0, 255, 0));//verde
	rectangle(img, pt4a, pt4b, Scalar(0, 0, 255));//vermelho


	imshow(title, img);
}

